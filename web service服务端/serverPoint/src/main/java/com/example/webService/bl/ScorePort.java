
package com.example.webService.bl;

import com.example.webService.entity.*;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.7-b01
 * Generated source version: 2.2
 *
 */
@WebService(name = "ScorePort", targetNamespace = "http://jw.nju.edu.cn/wsdl")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
        ObjectFactory.class
})
public interface ScorePort {


    /**
     *
     * @param studentId
     * @return
     *     returns main.java.example.suck.课程成绩列表类型
     * @throws StudentDoNotExistFault
     * @throws InvalidDataFault
     * @throws ScoreDoNotExistFault
     */
    @WebMethod(action = "score/getScoreListById")
    @WebResult(name = "\u8bfe\u7a0b\u6210\u7ee9\u5217\u8868", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "scoreList")
    @Action(input = "score/getScoreListByIdRequest", output = "score/getScoreListByIdResponse", fault = {
            @FaultAction(className = StudentDoNotExistFault.class, value = "score/StudentDoNotExistFault"),
            @FaultAction(className = InvalidDataFault.class, value = "score/InvalidDataFault"),
            @FaultAction(className = ScoreDoNotExistFault.class, value = "score/ScoreDoNotExistFault")
    })
    public CourseScoreList getScoreListById(
            @WebParam(name = "getScoreListParam", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "studentId")
                    GetScoreListParamType studentId)
            throws InvalidDataFault, ScoreDoNotExistFault, StudentDoNotExistFault
    ;

    /**
     *
     * @param studentId
     * @return
     *     returns main.java.example.suck.课程成绩列表类型
     * @throws StudentDoNotExistFault
     * @throws InvalidDataFault
     * @throws ScoreDoNotExistFault
     */
    @WebMethod(action = "score/deleteScoreListById")
    @WebResult(name = "\u8bfe\u7a0b\u6210\u7ee9\u5217\u8868", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "deletedScoreList")
    @Action(input = "score/deleteScoreListByIdRequest", output = "score/deleteScoreListByIdResponse", fault = {
            @FaultAction(className = StudentDoNotExistFault.class, value = "score/StudentDoNotExistFault"),
            @FaultAction(className = InvalidDataFault.class, value = "score/InvalidDataFault"),
            @FaultAction(className = ScoreDoNotExistFault.class, value = "score/ScoreDoNotExistFault")
    })
    public CourseScoreList deleteScoreListById(
            @WebParam(name = "deleteScoreListParam", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "studentId")
                    DeleteScoreListParamType studentId)
            throws InvalidDataFault, ScoreDoNotExistFault, StudentDoNotExistFault
    ;

    /**
     *
     * @param scoreList
     * @return
     *     returns main.java.example.suck.课程成绩列表类型
     * @throws StudentDoNotExistFault
     * @throws InvalidDataFault
     */
    @WebMethod(action = "score/updateScoreList")
    @WebResult(name = "\u8bfe\u7a0b\u6210\u7ee9\u5217\u8868", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "updatedStudentScore")
    @Action(input = "ScoreList/updateScoreListRequest", output = "score/updateScoreListResponse", fault = {
            @FaultAction(className = StudentDoNotExistFault.class, value = "score/StudentDoNotExistFault"),
            @FaultAction(className = InvalidDataFault.class, value = "score/InvalidDataFault"),
            @FaultAction(className = ScoreDoNotExistFault.class, value = "score/ScoreDoNotExistFault")
    })
    public CourseScoreList updateScoreList(
            @WebParam(name = "updateScoreListParam", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "scoreList")
                    UpdateScoreListParamType scoreList)
            throws InvalidDataFault, StudentDoNotExistFault, ScoreDoNotExistFault
    ;

    /**
     *
     * @param scoreList
     * @return
     *     returns main.java.example.suck.课程成绩列表类型
     * @throws StudentDoNotExistFault
     * @throws ScoreExistedFault
     * @throws InvalidDataFault
     */
    @WebMethod(action = "score/addScoreList")
    @WebResult(name = "\u8bfe\u7a0b\u6210\u7ee9\u5217\u8868", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "addedScoreList")
    @Action(input = "score/addScoreListRequest", output = "score/addScoreListResponse", fault = {
            @FaultAction(className = StudentDoNotExistFault.class, value = "score/StudentDoNotExistFault"),
            @FaultAction(className = ScoreExistedFault.class, value = "score/ScoreExistedFault"),
            @FaultAction(className = InvalidDataFault.class, value = "score/InvalidDataFault")
    })
    public CourseScoreList addScoreList(
            @WebParam(name = "addScoreListParam", targetNamespace = "http://jw.nju.edu.cn/schema", partName = "scoreList")
                    AddScoreListParamType scoreList)
            throws InvalidDataFault, ScoreExistedFault, StudentDoNotExistFault
    ;

}
