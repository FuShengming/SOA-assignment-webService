
package cn.edu.nju.jw.wsdl;

import javax.jws.WebService;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import javax.xml.ws.BindingType;

import cn.edu.nju.jw.schema.ObjectFactory;
import cn.edu.nju.jw.schema.成绩类型;
import cn.edu.nju.jw.schema.课程成绩列表类型;
import cn.edu.nju.jw.schema.课程成绩类型;
import org.xml.sax.SAXException;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.StringReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 */
@WebService(portName = "GradeServiceEndpoint", serviceName = "GradeService", targetNamespace = "http://jw.nju.edu.cn/wsdl", endpointInterface = "cn.edu.nju.jw.wsdl.GradeServiceInterface")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
public class GradeService_GradeServiceEndpointImpl
        implements GradeServiceInterface {

    // 用于业务实现，即将成绩数据存于内存
    private 课程成绩列表类型 gradeData = new 课程成绩列表类型();

    // 用于生成一些schema的对象以及对象包装
    private ObjectFactory factory = new ObjectFactory();

    // 借用其marshall和schema验证功能，用于验证输入
    private Marshaller courseGradeListMarshaller = null;

    public GradeService_GradeServiceEndpointImpl() throws Exception {
        // 获取JAXB的上下文环境，需要传入具体的 Java bean
        JAXBContext context = JAXBContext.newInstance(课程成绩列表类型.class);
        // 创建 Marshaller 实例
        courseGradeListMarshaller = context.createMarshaller();
        // 设置转换参数 -> 这里举例是告诉序列化器是否格式化输出
        courseGradeListMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        // 设置jaxb的schema验证
        SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
        File schemaLocation = new File("schemas/ScoreList.xsd");
        Schema schema = factory.newSchema(schemaLocation);
        courseGradeListMarshaller.setSchema(schema);
    }

    /**
     * 输入学生学号，返回学号对应的学生的所有课程成绩
     * 若查询成功则返回课程成绩，失败则返回相应的fault信息
     *
     * @param studentNumber
     * @return returns cn.edu.nju.jw.schema.课程成绩列表类型
     * @throws CannotFindFault
     * @throws InvalidRequestFault
     */
    public 课程成绩列表类型 searchGrade(String studentNumber)
            throws CannotFindFault, InvalidRequestFault {
        // 检验输入参数
        if (!isValid(studentNumber)) {
            throw new InvalidRequestFault(null, "invalid param");
        }

        // 遍历内存中的存储数据，将搜索到的对应学号的成绩整合为一个课程成绩列表返回
        课程成绩列表类型 result = new 课程成绩列表类型();
        for (课程成绩类型 courseGrade : gradeData.get课程成绩()) {
            课程成绩类型 resultGrade = null;
            for (成绩类型 grade : courseGrade.get成绩()) {
                if (grade.get学号().equals(studentNumber)) {
                    if (resultGrade == null) {
                        resultGrade = new 课程成绩类型();
                        resultGrade.set成绩性质(courseGrade.get成绩性质());
                        resultGrade.set课程编号(courseGrade.get课程编号());
                    }
                    resultGrade.get成绩().add(grade);
                }
            }
            if (resultGrade != null) {
                result.get课程成绩().add(resultGrade);
            }
        }
        // 查询成绩结果数量为0，返回cannotfind异常
        if (result.get课程成绩().size() == 0) {
            return result;
            //throw new CannotFindFault(null, "cannot find " + studentNumber + "'s grade");
        }
        return result;
    }

    /**
     * 以课程成绩列表的形式输入待插入的成绩信息，对输入的信息执行插入操作，
     * 若插入成功则返回插入的成绩信息；若已存在待插入的信息，则返回相应fault；请求信息有误则返回相应的fault
     *
     * @param courseGradeListRequest
     * @return returns cn.edu.nju.jw.schema.课程成绩列表类型
     * @throws AlreadyExistFault
     * @throws InvalidRequestFault
     */
    public 课程成绩列表类型 addGrade(课程成绩列表类型 courseGradeListRequest)
            throws AlreadyExistFault, InvalidRequestFault {
        //检验输入参数
        String validateMessage = isValid(courseGradeListRequest);
        if (validateMessage != null) {
            throw new InvalidRequestFault(null, "invalid param: " + validateMessage);
        }

        // 针对输入内容，查看内存存储的数据中是否已有相关成绩，则抛出alreadyexist异常
        StringBuilder faultReason = new StringBuilder();
        for (课程成绩类型 courseGrade : courseGradeListRequest.get课程成绩()) {
            for (成绩类型 grade : courseGrade.get成绩()) {
                if (null != find(gradeData, courseGrade.get课程编号(),
                        courseGrade.get成绩性质().value(),
                        grade.get学号())) {
                    faultReason.append("already exist: ")
                            .append("课程编号：").append(courseGrade.get课程编号())
                            .append(", 成绩性质").append(courseGrade.get成绩性质().value())
                            .append(", 学号：").append(grade.get学号())
                            .append(", 得分：").append(grade.get得分());
                }
            }
        }
        if (faultReason.length() != 0) {
            throw new AlreadyExistFault(null, faultReason.toString());
        }
        // 插入成绩数据
        for (课程成绩类型 courseGrade : courseGradeListRequest.get课程成绩()) {
            gradeData.get课程成绩().add(courseGrade);
        }
        return courseGradeListRequest;
    }

    /**
     * 以课程成绩列表的形式输入修改信息，根据学号、课程号、成绩类型查询指定的成绩信息并修改，
     * 若修改成功则返回修改后的信息，失败则返回相应的fault信息
     *
     * @param courseGradeListRequest
     * @return returns cn.edu.nju.jw.schema.课程成绩列表类型
     * @throws CannotFindFault
     * @throws InvalidRequestFault
     */
    public 课程成绩列表类型 modifyGrade(课程成绩列表类型 courseGradeListRequest)
            throws CannotFindFault, InvalidRequestFault {
        //检验输入参数
        String validateMessage = isValid(courseGradeListRequest);
        if (validateMessage != null) {
            throw new InvalidRequestFault(null, "invalid param: " + validateMessage);
        }

        // 针对输入的内容，查找内存存储数据中的对应对象，若全部能查找到，则作修改，否则抛出cannotfind异常
        StringBuilder faultReason = new StringBuilder();
        Map<成绩类型, Integer> target = new HashMap<>();
        for (课程成绩类型 courseGrade : courseGradeListRequest.get课程成绩()) {
            for (成绩类型 grade : courseGrade.get成绩()) {
                成绩类型 gradeTarget = find(gradeData, courseGrade.get课程编号(),
                        courseGrade.get成绩性质().value(),
                        grade.get学号());
                if (null == gradeTarget) {
                    faultReason.append("cannot find: ")
                            .append("课程编号：").append(courseGrade.get课程编号())
                            .append(", 成绩性质").append(courseGrade.get成绩性质().value())
                            .append(", 学号：").append(grade.get学号())
                            .append(", 得分：").append(grade.get得分());
                }
                target.put(gradeTarget, grade.get得分());
            }
        }
        if (faultReason.length() != 0) {
            throw new CannotFindFault(null, faultReason.toString());
        }

        // 修改成绩
        for (Map.Entry<成绩类型, Integer> modifyTarget : target.entrySet()) {
            modifyTarget.getKey().set得分(modifyTarget.getValue());
        }
        return courseGradeListRequest;
    }

    /**
     * 以课程成绩列表的形式输入待删除的成绩信息，基于学号、课程成绩和成绩类型查找指定成绩并删除，
     * 若删除成功则返回被删除的成绩信息；若未查询到待删除的信息，则返回相应fault；请求信息有误则返回相应的fault
     *
     * @param courseGradeListRequest
     * @return returns cn.edu.nju.jw.schema.课程成绩列表类型
     * @throws CannotFindFault
     * @throws InvalidRequestFault
     */
    public 课程成绩列表类型 deleteGrade(课程成绩列表类型 courseGradeListRequest)
            throws CannotFindFault, InvalidRequestFault {
        //检验输入参数
        String validateMessage = isValid(courseGradeListRequest);
        if (validateMessage != null) {
            throw new InvalidRequestFault(null, "invalid param: " + validateMessage);
        }

        // 针对输入的内容，查找内存存储数据中的对应对象，若全部能查找到，则作删除，否则抛出cannotfind异常
        StringBuilder faultReason = new StringBuilder();
        for (课程成绩类型 courseGrade : courseGradeListRequest.get课程成绩()) {
            for (成绩类型 grade : courseGrade.get成绩()) {
                if (null == (find(gradeData, courseGrade.get课程编号(),
                        courseGrade.get成绩性质().value(),
                        grade.get学号()))) {
                    faultReason.append("cannot find: ")
                            .append("课程编号：").append(courseGrade.get课程编号())
                            .append(", 成绩性质").append(courseGrade.get成绩性质().value())
                            .append(", 学号：").append(grade.get学号())
                            .append(", 得分：").append(grade.get得分());
                }
            }
        }
        if (faultReason.length() != 0) {
            throw new CannotFindFault(null, faultReason.toString());
        }

        // 针对内存存储的成绩数据，若在输入参数中有对应项，则作删除操作
        List<课程成绩类型> courseGradeList = gradeData.get课程成绩();
        for (int i = 0; i < courseGradeList.size(); i++) {
            课程成绩类型 courseGrade = courseGradeList.get(i);
            List<成绩类型> gradeList = courseGrade.get成绩();
            for (int j = 0; j < gradeList.size(); j++) {
                成绩类型 grade = gradeList.get(j);
                if (null != find(courseGradeListRequest,
                        courseGrade.get课程编号(), courseGrade.get成绩性质().value(),
                        grade.get学号())) {
                    gradeList.remove(j);
                    j--;
                }
            }
            if (gradeList.size() == 0) {
                courseGradeList.remove(i);
                i--;
            }
        }
        return courseGradeListRequest;
    }

    // 利用marshaller的schema验证来验证对象输入
    private String isValid(课程成绩列表类型 courseGradeListRequest) {
        try {
            ByteArrayOutputStream ba = new ByteArrayOutputStream();
            courseGradeListMarshaller.marshal(factory.create课程成绩列表(courseGradeListRequest), ba);
            return null;
        } catch (JAXBException e) {
            return e.toString();
        }
    }

    // 简单的学号参数格式验证
    private boolean isValid(String studentNumberRequest) {
        return studentNumberRequest.length() == 9;
    }


    // 查找课程成绩列表里的对应成绩项，无则返回null
    private 成绩类型 find(课程成绩列表类型 courseGradeList,
                      String courseNumber, String gradeType,
                      String studentNumber) {
        for (课程成绩类型 courseGrade : courseGradeList.get课程成绩()) {
            if (courseNumber.equals(courseGrade.get课程编号())
                    && gradeType.equals(courseGrade.get成绩性质().value())) {
                for (成绩类型 grade : courseGrade.get成绩()) {
                    if (studentNumber.equals(grade.get学号())) {
                        return grade;
                    }
                }
            }
        }
        return null;
    }

}
